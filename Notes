---------------------------------------------------------------------------------------------------------
** ANSIBLE **
---------------------------------------------------------------------------------------------------------

    It is configuration management system. 
    It is agentless.

    IDEMPOTENT - Result is always same if action perform repeately. 

    https://docs.ansible.com/

INSTALLATION: 

    https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html

---------------------------------------------------------------------------------------------------------
** ANSIBLE CONCEPTS **
---------------------------------------------------------------------------------------------------------

ANSIBLE INVENTORY: 

    Ansible is agentless means no need to install software in target system.
    For Linux, uses SSH and for Windows, uses Powershell remoting. 

    Default inventory file is located in /etc/ansible/hosts file. 

    Inventory Parameters: 
        ansible_host        -   host name 
        ansible_connection  -   ssh for Linux / winrm for windows / localhost
        ansible_port        -   port number 
        ansible_user        -   root/administrator 
        ansible_ssh_pass    -   password
        ansible_password    -   password
        ansible_ssh_private_key_file - /private/key/path 

    File Structure: 

    alias-linux-name ansible_host=host-name ansible_connection=ssh ansible_user=root ansible_ssh_pass=Password  variable1=value1 
    
    alias-windows-name ansible_host=host-name ansible_connection=winrm ansible_user=administrator ansible_password=Password variable1=value1 

    [group-name]                    # To group by using alias. 
    alias-name
    alias-name2

    [new-group-name:children]       # This is to create group by using group. 
    group-name1
    group-name2 
    
---------------------------------------------------------------------------------------------------------

PLAYBOOKS: 

    It is written in YAML format. 

    PLAY: It is set of activities (tasks).
        TASKS: An action to be performed on hosts. 
    
    Playbook  ->  Play (set of tasks) -> Tasks (actions)

    File structure: 

    Play is array/list and can have multiple play. 
    Task is array/list and can have multiple tasks under play. 
    For HOSTS, Only group-name should be used without children option in group of group name. Also can use pattern *-group-name. 

    -
        name: 'Name of the play'
        hosts: 'host-name which should be maintain in inventory-file. It can be groupname or alias'
        tasks: 
            -
                name: 'Name of the tasks 1'
                command: this is module name and corresponding execution.
            -
                name: 'Name of the tasks 2'
                command: this is module name and corresponding execution. 
                
---------------------------------------------------------------------------------------------------------    
ANSIBLE MODULES: 

    System      -   System level activities like restart, create new useretc. 
    Command     -   Execute the command / script. 
    Files       -   Works with file like copy, archive, compress etc. 
    Database    -   Works with database like mongodb etc. 
    Cloud       -   Works with cloud providers like aws etc. 
    Windows     -   Windows environment like win_copy etc. 

Command Module: 
    To execute the command in target system. 

Script Module: 
    Runs a script after transfer to target system and execute in remote system. 

Service Module: 
    Used to start, stop and restart services in target system. 
    state=Started  - If already running, no change. If not running, start the service. 

Lineinfile Module: 
    Search for a line in a file and replace it or add it if doesnot exists.
    
---------------------------------------------------------------------------------------------------------

ANSIBLE VARIABLES: 

    Stores information that varies with each host. 
    
    Declaration:

    1. Within playbook, 

        hosts:
        vars: 
          key1: value1 

    2. Within inventory file, 

        alias key1=value1 key2=value2

    3. Create separate variable.yaml file, 

        key1: value1
        key2: value2

    Reference: 
        '{{ key1 }}'

---------------------------------------------------------------------------------------------------------        

REGISTER: 

    It helps to register the output of result in variable.

    register: result  (result is a variable which contains the output value )

---------------------------------------------------------------------------------------------------------        

ANSIBLE CONDITIONALS:

    If condition is true, then only tasks will run. 

    when: <<condition>>

    when: ansible_host == "Debian" or ansible_host == "Ubuntu"

    when: ansible_host == "Debian" and ansible_host == "Ubuntu" 

    when: item.variables == True     (used in Loops)

    when: result.stdout.find('down') != -1   (Used to check the register output) 
            if not found, returns -1 . != (not equal). Means check whethere equal to down. 

---------------------------------------------------------------------------------------------------------                    
ANSIBLE LOOPS: 

    loop or with_items or with_file or with_mongodb or with_* 

    Declare: 
    
        1. loop: 
             - name: abc
             - name: def 
        
        2. loop:
             - name: abc 
               id: 123
             - name: def
               id: 456

        3. loop: '{{ variable-name }}'

    Reference: 

        1. '{{ item }}'
        2. '{{ item.name }}'  '{{ item.id }}'

---------------------------------------------------------------------------------------------------------                    
ANSIBLE ROLES: 

    It is packaged tasks (code) and can be reused which performs specific set of activities. 
    Assign role to servers. Role can be mysql, webserver, appserver etc. 

ANSIBLE GALAXY: 
    It is repository which contains roles. Which can be used to download and upload roles. 

    ansible-galaxy init role-name                   -> create new role. 

    - name: 
      hosts: 
      roles:                        -> To reference the role in playbook. 
        - mysql
    
    /etc/ansible/hosts  - default role path. 
    Place the role directory on same path of play-book location. 

    ansible-galaxy search role-name                 -> To search the role
    ansible-galaxy install role-name                -> To download the role from galaxy. 
    ansible-galaxy list                             -> To show the list of galaxy. 
    ansible-config dump | grep ROLE                 -> To check the configuration details. 
    ansible-galaxy install role-name -p ./roles     -> To create new role directory in current path.

    Upload new role to galaxy using git hub.

---------------------------------------------------------------------------------------------------------                    
ADVANCED TOPICS:

    Ansible control machine can only be linux. Target can be both windows and linux. 

    Dynamic inventory -> ansible-playbook -i inventory.py play-file 
    Can create custom modules using python and place under module library. 

---------------------------------------------------------------------------------------------------------
** CORE COMPONENTS **
---------------------------------------------------------------------------------------------------------

FACTS: 

    First collect information (gather facts) about target system. 
    By default, ansible collects facts from target system.
    Setup module is used by ansible internally to collect facts. 

    While executing playbook: 

        PLAY [Play 1] ***************************************

        TASK [Gathering Facts] ******************************
        ok: [localhost]

        TASK [Execute a date command] ***********************
        changed: [localhost]

        PLAY RECAP ******************************************
        localhost : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   

    In playbook: 

        hosts: all 
        gather_facts: no
        tasks: 
        - debug:
            var: ansible_facts                  # using debug module, retrive the ansible_facts values.
        
    In config file: 

        /etc/ansible/ansible.cfg file. 
        # smart - gather by default, but don't regather if already gathered
        # implicit - gather by default, turn off with gather_facts: False
        # explicit - do not gather by default, must say gather_facts: True
        # gathering = implicit

---------------------------------------------------------------------------------------------------------

CONFIGURATION FILES: 

    /etc/ansible/ansible.cfg    -   default config file. 
    To override this, copy this ansible.cfg file and place under playbook directory. 

    $ANSIBLE_CONFIG=config-path ansible-playbook playbook.yaml 

    Precedence: (From high to low)
    Environment variable (ANSIBLE_CONFIG)  <- ansible.cfg in current directory  <-  .ansible.cfg in user home directory <- ansible.cfg in default location.

    For gathering=implicit, corresponding environment variable is ANSIBLE_GATHERING

    For single execution, $ANSIBLE_GATHERING=explicit ansible-playbook playbook.yaml 
    For all execution, export ANSIBLE_GATHERING=explicit , ansible-playbook playbook.yaml 

    Recommended is to create local copy of ansible.cfg file. 

---------------------------------------------------------------------------------------------------------
** INSTALL AND CONFIGURE **
---------------------------------------------------------------------------------------------------------

INSTALL: 

    To refer the documentation for latest ansible installation procedure, 

    https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html


    /etc/ansible/ansible.cfg  -> available for installed using yum or apt. 
    config file not available when installed using pip and need to create manually. 

    sudo yum install epel-release -y ; sudo yum install ansible -y

---------------------------------------------------------------------------------------------------------

CREATE AND DISTRIBUTE SSH KEYS TO MANAGED NODES: 

    Password less ssh connection: 
        User - ssh-keygen -> generate public and private key.
        public key is placed in server (under ~/.ssh/authorized keys) - using ssh-copy-id tool.
        user login using user@server -i private-key 
    
    ansible_ssh_private_key_file = /path/to/key 

    in inventory file, add ansible_user & ansible_ssh_private_key_file field. 

    ssh-keygen -t rsa -f ~/.ssh/ansible             -> To generate the key. 

    ansible -m ping -i inventory server-name        -> To ping server for connectivity check. 

---------------------------------------------------------------------------------------------------------

ADHOC ANSIBLE COMMANDS: 

    It helps to run the adhoc command using ansible.

    ansible -m ping -i inventory server-name        -> To ping server for connectivity check. 

---------------------------------------------------------------------------------------------------------

ADHOC ANSIBLE COMMANDS - SHELL SCRIPT: 

    file-name.sh 
    can be executed by: 
        1. sh file-name.sh 
        2. chmod 755 filename.sh   ,   ./fine-name.sh 

        ansible all -a "commands" -i inventory          -> select host name from inventory file. 
        ansible node00 -m copy -a "src=/etc/resolv.conf dest=/tmp/resolv.conf" -i inventory   
        ansible-playbook playbook.yml -i inventory -vv  -> Verbose, capture more information.

---------------------------------------------------------------------------------------------------------

PRIVILEGE ESCALATION: 

    root user 

    sudo - become super user 

    su nginx, su mysql  - switch user 

-   hosts: all
    become: yes  (escalate the privelage)
    become_method: doas/sudo   # sudo is default. 
    become_user: 
    tasks: 

    precedence(from high to low): 
        command line <- playbook <- inventory <- ansible.cfg 
    
    ansible_become 
    ansible_user 
    ansible_method 

    --ask-become-pass -> to ask password for sudo.

    become_user -> default value is root

    become_flags -> to change the user to nobody when the shell is set to nologin.

FAQ: 
    yes or true or True or TRUE  / False or false or no or FALSE 

    {{ variable-name }} - braces required to get the variable. 
    places where curly braces not used: 
        1. var: variable_name 
        2. when: ansible_host == 'web01'
        
    "{{ variable-name }}"           -> if only variable, then require single or double quotes. 
    variable is {{variable-name}}   -> if along with other values, then no quotes. 

    ansible_ssh_pass or ansible_password 

---------------------------------------------------------------------------------------------------------

ANSIBLE MODULES: 

    Package Module: 
        depends up on OS, select the package like yum or apt. 
        Depends upon name, will install (for ex: httpd for centos, apache2 for ubuntu)
    
    Service Module: 
        To start and enable service. 
    
    Firewalld Module: 
        permanenet: yes  (effect after reboot)
        immediate: yes   (effect immediate)
    
    lvg Module (logical volume group): 
    
    filesystem Module:
        create file system and mount it.  
    
    file Module: 

    archive Module: 

    unarchive module: 
        remote_source: yes   (source file is in target machine)

    cron Module: 
        schedule the job. 

    user Module: 
        create new user. 

    group Module: 
        to create new group. 
    
    authorized_keys module: 
        
---------------------------------------------------------------------------------------------------------    
VARIABLE PRECEDENCE: 

    From High to Low: 

        environment variables <- playbook <- inventory <- /etc/ansible/hosts 

        Host Vars <- Group Vars  (In Inventory)

---------------------------------------------------------------------------------------------------------    
VARIABLE SCOPE: 

    Host variable scope is accessible with in that host.  (In inventory file)
    Playbook vars variable is accessible within that host. (In playbook)

---------------------------------------------------------------------------------------------------------    
USE VARIABLES TO RETRIEVE RESULT: 

    register: result        (to store the task output. result is variable and it can be any value)
    - debug: 
         var: result.rc     (to display the value)

    -vv  (To capture output in verbose mode which input in CLI)

    Register variable is store in memory.

---------------------------------------------------------------------------------------------------------

MAGIC VARIABLES: 

    If variable is defined in one host. If require to refer that host variable. then use the magic variables.

    hostvars['host-name'].variable-name     -> in inventory file. 
    groups['group-name']                    -> Return the list of host under the group. 
    group_names['host-name']                -> Return the list of group for hte given host. 
    inventory_hostname                      -> Returns host name. 
    inventory_hostname_short                -> short version of inventory hostname. 
    inventory_file                          -> File name which inventory defined. 

    https://docs.ansible.com/ansible/latest/reference_appendices/special_variables.html

---------------------------------------------------------------------------------------------------------

JINJA2 BASICS: 

    Templating: 
        Hi {{ Employee }},
        Thanks for completing {{ no_of_years }} years. Continue your support. 

        Regards,

    Hi {{ employee }} | upper               - convert to upper case. 
    lower                                   - convert to lower case. 
    title                                   - first character is caps. 
    replace("old-value","another-value")    - replace old value with new value. 
    name | default("new-default")           - if value is available, use that value. else takes default value. 

    {{ [1,2,3] | min }                      - to get min value. 
    {{ [1,2,3] | max }                      - to get max value. 
    {{ [1,2,3] | unique }                   - to get unique value. 
    {{ [1,2,3,4] | union ([5,6]) }}         - to join and return unique value. 
    intersect                               - to get common nbr between 2 arrays. 
    random                                  - to get random numbers. 
    join                                    - join the array of words. 


    {%  for number in [0,1,2,3] %}          - {% %}  represents the block. 
    {{ number }}
    {% endfor %}

    {% if number == 2 %}
    {% endif %}

---------------------------------------------------------------------------------------------------------

JINJA2 IN ANSIBLE: 

    https://docs.ansible.com/ansible/2.8/user_guide/playbooks_filters.html

    {{ path | win_basename }}               -   last filename in path for windows.
    {{ path | win_splitdrive }}             -   to separate the driver into list. 

---------------------------------------------------------------------------------------------------------


    





    







